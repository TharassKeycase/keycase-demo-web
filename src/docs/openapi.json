{
  "openapi": "3.0.3",
  "info": {
    "title": "CRM API",
    "description": "Complete API documentation for the CRM application built with Next.js, Prisma, and NextAuth",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    },
    {
      "url": "https://api.example.com/api",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints"
    },
    {
      "name": "Customers",
      "description": "Customer management endpoints"
    },
    {
      "name": "Orders",
      "description": "Order management endpoints"
    },
    {
      "name": "Products",
      "description": "Product management endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Dashboard",
      "description": "Dashboard and analytics endpoints"
    },
    {
      "name": "Roles",
      "description": "Role management endpoints"
    },
    {
      "name": "Profile",
      "description": "User profile management endpoints"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user and receive JWT token",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get all customers",
        "description": "Retrieve a paginated list of customers with optional filtering and sorting",
        "operationId": "getCustomers",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (1-based)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter customers by name or email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": ["name", "email", "createdAt", "updatedAt"],
              "default": "createdAt"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of customers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCustomerResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Create a new customer",
        "description": "Create a new customer record",
        "operationId": "createCustomer",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "headers": {
              "Location": {
                "description": "URL of the created customer",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/customers/{customerId}": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get customer by ID",
        "description": "Retrieve a specific customer by their ID",
        "operationId": "getCustomerById",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Customer ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "tags": ["Customers"],
        "summary": "Update customer",
        "description": "Update an existing customer's information",
        "operationId": "updateCustomer",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Customer ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": ["Customers"],
        "summary": "Delete customer",
        "description": "Soft delete a customer (marks as archived)",
        "operationId": "deleteCustomer",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Customer ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Customer deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/customers/{customerId}/orders": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get customer orders",
        "description": "Retrieve all orders for a specific customer",
        "operationId": "getCustomerOrders",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Customer ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of customer orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get all orders",
        "description": "Retrieve a paginated list of orders with optional filtering and sorting",
        "operationId": "getOrders",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (1-based)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter orders",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": ["id", "total", "createdAt", "state"],
              "default": "createdAt"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Filter orders by specific customer ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter orders by state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrderResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": ["Orders"],
        "summary": "Create a new order",
        "description": "Create a new order with order items",
        "operationId": "createOrder",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get order by ID",
        "description": "Retrieve a specific order by its ID",
        "operationId": "getOrderById",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "tags": ["Orders"],
        "summary": "Update order",
        "description": "Update an existing order",
        "operationId": "updateOrder",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Order ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": ["Orders"],
        "summary": "Delete order",
        "description": "Soft delete an order (marks as archived)",
        "operationId": "deleteOrder",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Order deleted"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/orders/{orderId}/restore": {
      "post": {
        "tags": ["Orders"],
        "summary": "Restore deleted order",
        "description": "Restore a previously archived order",
        "operationId": "restoreOrder",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Get all products",
        "description": "Retrieve a paginated list of products with optional filtering and sorting",
        "operationId": "getProducts",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (1-based)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter products by name or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": ["name", "price", "createdAt", "updatedAt"],
              "default": "createdAt"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Minimum price filter",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Maximum price filter",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": ["Products"],
        "summary": "Create a new product",
        "description": "Create a new product in the catalog",
        "operationId": "createProduct",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get product by ID",
        "description": "Retrieve a specific product by its ID",
        "operationId": "getProductById",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "tags": ["Products"],
        "summary": "Update product",
        "description": "Update an existing product's information",
        "operationId": "updateProduct",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Product ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete product",
        "description": "Soft delete a product (marks as archived)",
        "operationId": "deleteProduct",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Product deleted"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/products/{productId}/restore": {
      "post": {
        "tags": ["Products"],
        "summary": "Restore deleted product",
        "description": "Restore a previously archived product",
        "operationId": "restoreProduct",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Retrieve a list of all active users",
        "operationId": "getUsers",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user",
        "description": "Create a new user account (Admin only)",
        "operationId": "createUser",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "operationId": "getUserById",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update an existing user's information",
        "operationId": "updateUser",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Soft delete a user (marks as archived)",
        "operationId": "deleteUser",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/users/{userId}/restore": {
      "post": {
        "tags": ["Users"],
        "summary": "Restore deleted user",
        "description": "Restore a previously archived user",
        "operationId": "restoreUser",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/users/change": {
      "post": {
        "tags": ["Users"],
        "summary": "Change user password (Deprecated)",
        "description": "**DEPRECATED**: Use `/me/change-password` instead. Change the password for the authenticated user",
        "operationId": "changePassword",
        "deprecated": true,
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get all roles",
        "description": "Retrieve a list of all available roles",
        "operationId": "getRoles",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/dashboard/stats": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get dashboard statistics",
        "description": "Retrieve aggregated statistics for the dashboard",
        "operationId": "getDashboardStats",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "Dashboard statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardStats"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": ["Profile"],
        "summary": "Get current user profile",
        "description": "Retrieve the profile information for the authenticated user",
        "operationId": "getCurrentUserProfile",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "User profile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "tags": ["Profile"],
        "summary": "Update current user profile",
        "description": "Update the profile information for the authenticated user",
        "operationId": "updateCurrentUserProfile",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "409": {
            "description": "Email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/me/change-password": {
      "put": {
        "tags": ["Profile"],
        "summary": "Change current user password",
        "description": "Change the password for the authenticated user (requires current password)",
        "operationId": "changeCurrentUserPassword",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/users/{userId}/change-password": {
      "put": {
        "tags": ["Users"],
        "summary": "Change user password (Admin)",
        "description": "Change the password for any user (Admin/Manager only, no current password required)",
        "operationId": "adminChangeUserPassword",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the user whose password to change"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminPasswordChange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string",
            "example": "john.doe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "SecurePass123!"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT authentication token"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "address": {
            "type": "string",
            "example": "123 Main St"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "country": {
            "type": "string",
            "example": "USA"
          },
          "phone": {
            "type": "string",
            "example": "+1-555-123-4567"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CustomerCreate": {
        "type": "object",
        "required": ["name", "email", "address", "city"],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "address": {
            "type": "string",
            "example": "123 Main St"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "country": {
            "type": "string",
            "example": "USA"
          },
          "phone": {
            "type": "string",
            "example": "+1-555-123-4567"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Laptop"
          },
          "description": {
            "type": "string",
            "example": "High-performance laptop for professionals"
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 999.99
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean",
            "default": false
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ProductCreate": {
        "type": "object",
        "required": ["name", "price"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Laptop"
          },
          "description": {
            "type": "string",
            "example": "High-performance laptop for professionals"
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 999.99,
            "minimum": 0
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "total": {
            "type": "number",
            "format": "float",
            "example": 1999.98
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "orderId": {
            "type": "integer",
            "example": 1
          },
          "productId": {
            "type": "integer",
            "example": 1
          },
          "productName": {
            "type": "string",
            "example": "Laptop"
          },
          "quantity": {
            "type": "integer",
            "example": 2,
            "minimum": 1
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 999.99
          }
        }
      },
      "OrderCreate": {
        "type": "object",
        "required": ["customerId", "orderItems"],
        "properties": {
          "customerId": {
            "type": "integer",
            "example": 1
          },
          "orderItems": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["productId", "quantity"],
              "properties": {
                "productId": {
                  "type": "integer",
                  "example": 1
                },
                "quantity": {
                  "type": "integer",
                  "example": 2,
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "OrderUpdate": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "example": 1
          },
          "orderItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "integer",
                  "example": 1
                },
                "quantity": {
                  "type": "integer",
                  "example": 2,
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "john.doe"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "department": {
            "type": "string",
            "example": "Sales"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "active": {
            "type": "boolean",
            "default": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastLoginDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "passwordChange": {
            "type": "boolean",
            "default": false
          },
          "archived": {
            "type": "boolean",
            "default": false
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "roleId": {
            "type": "integer",
            "example": 2
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        }
      },
      "UserCreate": {
        "type": "object",
        "required": ["username", "firstName", "email", "password", "roleId"],
        "properties": {
          "username": {
            "type": "string",
            "example": "john.doe"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "department": {
            "type": "string",
            "example": "Sales"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "example": "SecurePass123!"
          },
          "roleId": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "department": {
            "type": "string",
            "example": "Sales"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "active": {
            "type": "boolean"
          },
          "roleId": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "PasswordChange": {
        "type": "object",
        "required": ["currentPassword", "newPassword"],
        "properties": {
          "currentPassword": {
            "type": "string",
            "format": "password"
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "minLength": 6
          }
        }
      },
      "AdminPasswordChange": {
        "type": "object",
        "required": ["newPassword"],
        "properties": {
          "newPassword": {
            "type": "string",
            "format": "password",
            "minLength": 6,
            "description": "New password for the user (admin can set without current password)"
          }
        }
      },
      "ProfileUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1,
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "department": {
            "type": "string",
            "description": "User's department"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Admin",
            "enum": ["Admin", "Manager", "User"]
          }
        }
      },
      "CreatedBy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "admin"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "admin@example.com"
          },
          "role": {
            "type": "string",
            "example": "Admin"
          }
        }
      },
      "DashboardStats": {
        "type": "object",
        "properties": {
          "customers": {
            "type": "integer",
            "example": 150,
            "description": "Total number of active customers"
          },
          "users": {
            "type": "integer",
            "example": 25,
            "description": "Total number of active users"
          },
          "products": {
            "type": "integer",
            "example": 50,
            "description": "Total number of active products"
          },
          "orders": {
            "type": "integer",
            "example": 320,
            "description": "Total number of orders"
          },
          "totalRevenue": {
            "type": "number",
            "format": "float",
            "example": 125000.50,
            "description": "Total revenue from all orders"
          },
          "recentOrders": {
            "type": "integer",
            "example": 45,
            "description": "Number of orders in the last 30 days"
          }
        }
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 1,
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "example": 10,
            "description": "Number of items per page"
          },
          "total": {
            "type": "integer",
            "example": 250,
            "description": "Total number of items"
          },
          "totalPages": {
            "type": "integer",
            "example": 25,
            "description": "Total number of pages"
          },
          "hasNextPage": {
            "type": "boolean",
            "example": true,
            "description": "Whether there is a next page"
          },
          "hasPrevPage": {
            "type": "boolean",
            "example": false,
            "description": "Whether there is a previous page"
          }
        }
      },
      "PaginatedCustomerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "PaginatedOrderResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "PaginatedProductResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Invalid request"
          },
          "message": {
            "type": "string",
            "example": "The request body is invalid"
          },
          "code": {
            "type": "integer",
            "example": 400
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT authentication token obtained from /api/login endpoint"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Unauthorized",
              "message": "Authentication required",
              "code": 401
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Forbidden",
              "message": "You don't have permission to access this resource",
              "code": 403
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Not Found",
              "message": "The requested resource was not found",
              "code": 404
            }
          }
        }
      },
      "BadRequestError": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Bad Request",
              "message": "The request is invalid",
              "code": 400
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": "Internal Server Error",
              "message": "An unexpected error occurred",
              "code": 500
            }
          }
        }
      }
    }
  }
}